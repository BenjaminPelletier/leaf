/*
 * display.cpp
 *
 *
 */
#include <Arduino.h>
#include "display.h"
#include "Leaf_SPI.h"

#define GLCD_RS LCD_RS
#define GLCD_RESET LCD_RESET


// Display Testing Temp Vars
float wind_angle = 0;
char seconds = 0;
char minutes = 0;
char hours = 0;
uint16_t heading = 0;
char string_heading[] = "  N  ";
char string_satNum[] = "00";
char string_gpsLat[] = "0000000000";
char string_gpsLng[] = "0000000000";



U8G2_ST7539_192X64_F_4W_HW_SPI u8g2(U8G2_R3, SPI_SS_LCD, LCD_RS, LCD_RESET);



void display_init(void) {
  digitalWrite(SPI_SS_LCD, HIGH);
  u8g2.setBusClock(20000000);
  u8g2.begin();
  u8g2.setContrast(80);

pinMode(LCD_BACKLIGHT, OUTPUT);

}




// Initialize the GRAPHIC LCD
void GLCD_init(void)
{
  pinMode(GLCD_RS, OUTPUT);
	digitalWrite(GLCD_RESET, LOW);
  delay(500);
  digitalWrite(GLCD_RESET, HIGH);
  delay(500);
	GLCD_inst(0b11100010); //Reset
  delay(20);
  GLCD_inst(0b10101111); //Enable
  delay(20);
  //GLCD_inst(0b10000001); //set Contrast
  //GLCD_inst(0b00001111); //contrast value
  delay(20);
  GLCD_inst(0b00000000);  //Column address LSB ->0
  delay(20);
  GLCD_inst(0b00010000);  //Column address MSB ->0
  delay(20);
  GLCD_inst(0b10110000);  //Page address ->0
  delay(20);
  GLCD_inst(0b10100110);  //Set inverse display->NO
  delay(20);

  for (int i=0; i<1536; i++){
    GLCD_data(0b00000000);    //clear LCD
  }
}



void display_battery_icon(uint16_t x, uint16_t y, uint8_t pct, bool charging) {

  uint8_t w =  7;
  uint8_t h = 12;  

  u8g2.setDrawColor(1);      
  u8g2.drawFrame(x,y+1,w,h-1);               // main battery box
  u8g2.drawLine(x+w/3, y, x+w-w/3-1, y);     // little +nib tip
  uint16_t fill = (h-2)*pct/100;
  u8g2.drawBox(x+1, y+h-fill-1, w-2, fill);  // fill up to capacity

  if(charging) {                             // draw lightning bolt if charging
    for (int i = 0; i<7; i++) {
      if ( (y+3+i) >= (y+h-fill-1) ) u8g2.setDrawColor(0); //invert lightning bolt where battery level is filled
      u8g2.drawPixel(x+w/2,y+3+i);
      if (i==2) u8g2.drawPixel(x+w/2-1,y+3+i);
      if (i==3) {u8g2.drawPixel(x+w/2-1,y+3+i); u8g2.drawPixel(x+w/2+1,y+3+i);}
      if (i==4) u8g2.drawPixel(x+w/2+1,y+3+i);
    }
    u8g2.setDrawColor(1); //end invert    
  }
}

void display_test_bat_icon(void) {
  uint8_t x = 1;
  uint8_t y = 1;
  uint8_t pct = 0;
  uint8_t w =  7;
  uint8_t h = 12; 
  bool charging = 1;


  u8g2.firstPage();
  do {
    for (int i=0; i<51; i++) {
      u8g2.setDrawColor(1);      
      u8g2.drawFrame(x,y+1,w,h-1);           // main battery box
      u8g2.drawLine(x+w/3, y, x+w-w/3-1, y); // little +nib tip
      uint16_t fill = (h-2)*pct/100;
      u8g2.drawBox(x+1, y+h-fill-1, w-2, fill);  // fill up to capacity

      // draw lightning bolt if charging
      if(charging) {
        for (int i = 0; i<7; i++) {
          if ( (y+3+i) >= (y+h-fill-1) ) u8g2.setDrawColor(0); //invert lightning bolt where battery level is filled
          u8g2.drawPixel(x+w/2,y+3+i);
          if (i==2) u8g2.drawPixel(x+w/2-1,y+3+i);
          if (i==3) {u8g2.drawPixel(x+w/2-1,y+3+i); u8g2.drawPixel(x+w/2+1,y+3+i);}
          if (i==4) u8g2.drawPixel(x+w/2+1,y+3+i);
        }
        u8g2.setDrawColor(1); //end invert
        
      }

      x += 10;
      pct += 2;
      if (x >= 63-w) {
        x = 1;
        y += h+2;
      }  
    }
  } while ( u8g2.nextPage() );
  delay(100);
}

// draw satellite constellation starting in upper left x, y and box size (width = height)
void display_satellites(uint16_t x, uint16_t y, uint16_t size) {
  Serial.println("entering display_satellites");
  u8g2.firstPage();
  do {
    // Draw the background
    u8g2.setDrawColor(0);
    u8g2.drawBox(x, y, size, size);   // clear the box drawing area
    u8g2.setDrawColor(1);
    u8g2.drawCircle(x+size/2, y+size/2, size/2);   // the horizon circle
    u8g2.drawCircle(x+size/2, y+size/2, size/4);   // the 45deg elevation circle

    // Draw the satellites
    for (int i = MAX_SATELLITES -1; i>=0; i--) { 
      if (sats[i].active) {
        /*
        Serial.print("act: ");
        Serial.print(sats[i].active);
        Serial.print(" el: ");
        Serial.print(sats[i].elevation);
        Serial.print(" az: ");
        Serial.print(sats[i].azimuth);
        Serial.print(" snr: ");
        Serial.println(sats[i].snr);
        */

        // Sat location (on circle display)
        uint16_t radius = (90 - sats[i].elevation) * size/2 / 90;
        int16_t sat_x = sin(sats[i].azimuth*PI/180)*radius;
        int16_t sat_y = - cos(sats[i].azimuth*PI/180)*radius;

        // Draw disc
        /*
        u8g2.drawDisc(size/2+sat_x, size/2+sat_y, size/16);
        u8g2.setDrawColor(0);
        u8g2.drawCircle(size/2+sat_x, size/2+sat_y, size/16+1);
        u8g2.setDrawColor(1);
        */

        // Draw box with numbers
        uint16_t x_pos = x + size/2 + sat_x;
        uint16_t y_pos = y + size/2 + sat_y;

        u8g2.setFont(u8g2_font_micro_tr);          // Font for satellite numbers
        if (sats[i].snr < 20) {                    
          u8g2.drawFrame(x_pos-5, y_pos-4, 11, 9); // white box with black border if SNR is low
          u8g2.setDrawColor(0);
          u8g2.drawBox(x_pos-4, y_pos-3, 9, 7); // erase the gap between frame and text
          u8g2.setDrawColor(1);
        } else {
          u8g2.drawBox(x_pos-4, y_pos-3, 9, 7);    // black box if SNR is high
          u8g2.setDrawColor(0);                    // .. with white font inside box
        }

        if (i<9) {
          u8g2.drawStr(x_pos-3, y_pos+3, "0");
          x_pos += 4;
        }
        u8g2.drawStr(x_pos-3, y_pos+3, itoa(i+1,string_satNum, 10));
        u8g2.setDrawColor(1);                
      }
     
    }
    
   
    //draw other GPS stuff just for testing purposes
    u8g2.drawStr(0, size + y + 10, "Lat: ");
    u8g2.drawStr(20, size + y + 10, itoa(gps.location.lat(), string_gpsLat, 10));

    u8g2.drawStr(0, size + y + 20, "Lon: ");
    u8g2.drawStr(20, size + y + 20, itoa(gps.location.lng(), string_gpsLng, 10));

    //u8g2.drawStr(0, size + y + 30, "Speed: ");
    //u8g2.drawStr(50, size + y + 30, gps.speed());

    u8g2.drawStr(0, size + y + 40, "Heading: ");
    u8g2.drawStr(50, size + y + 40, gps.cardinal(gps.course.deg()));
  } while ( u8g2.nextPage() );
  Serial.println("exiting display_satellites");
}


void display_test(void) {  
  delay(100);
  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_tinyunicode_tf);
    u8g2.drawStr(49, 18, "mph");

    u8g2.setFont(u8g2_font_leaf_n_6x12_hn);
    u8g2.drawStr(44, 12, "103");       // speed

    
    delay(30);
    //heading++;
    heading = wind_angle*360/(2 * PI)+180;
    heading = heading % 360;
    
    
    if (heading == 360) heading = 0;
    if (heading < 12 || heading >= 349) strcpy(string_heading, "  N >"); 
    else if (heading < 34 ) strcpy(string_heading, " NNE>");
    else if (heading < 57 ) strcpy(string_heading, "  NE>");
    else if (heading < 79 ) strcpy(string_heading, " ENE>");
    else if (heading < 102) strcpy(string_heading, "  E >");
    else if (heading < 124) strcpy(string_heading, " ESE>");
    else if (heading < 147) strcpy(string_heading, "  SE>");
    else if (heading < 169) strcpy(string_heading, " SSE>");
    else if (heading < 192) strcpy(string_heading, "< S  "); 
    else if (heading < 214) strcpy(string_heading, "<SSW ");
    else if (heading < 237) strcpy(string_heading, "< SW ");
    else if (heading < 259) strcpy(string_heading, "<WSW ");
    else if (heading < 282) strcpy(string_heading, "< W  ");
    else if (heading < 304) strcpy(string_heading, "<WNW ");
    else if (heading < 327) strcpy(string_heading, "< NW ");
    else if (heading < 349) strcpy(string_heading, "<NNW ");
    else strcpy(string_heading, "<999>");



    u8g2.drawStr( 0, 12, string_heading);  // direction


    uint16_t nav_circle_center_x = 26;
    uint16_t nav_circle_center_y = 41;
    uint16_t nav_circle_radius   = nav_circle_center_x;   // set to x dimension for left-justified nav circle

    u8g2.drawCircle(nav_circle_center_x,nav_circle_center_y,nav_circle_radius);
    u8g2.drawCircle(nav_circle_center_x,nav_circle_center_y,nav_circle_radius-1);
    u8g2.drawCircle(nav_circle_center_x,nav_circle_center_y,nav_circle_radius*2/3);
    u8g2.drawCircle(nav_circle_center_x,nav_circle_center_y,nav_circle_radius*1/3);
  
    // Wind Triangle
    uint16_t wind_triangle_radius = 10;
    wind_angle += .01;
    if (wind_angle > 2 * PI) wind_angle = 0;

    uint16_t wind_triangle_center_x = nav_circle_center_x;
    uint16_t wind_triangle_center_y = nav_circle_center_y+nav_circle_radius/2;    
    int16_t wind_triangle_tip_len = wind_triangle_radius-1;  // pixels from center for point
    int16_t wind_triangle_tail_len = wind_triangle_radius-1;  // pixels from center for the tails
    float wind_triangle_tail_angle = 0.65;  // pixels tail width (half-width)

    u8g2.setDrawColor(0);
    u8g2.drawDisc(wind_triangle_center_x, wind_triangle_center_y, wind_triangle_radius);
    u8g2.setDrawColor(1);
    u8g2.drawCircle(wind_triangle_center_x, wind_triangle_center_y, wind_triangle_radius);        
    u8g2.drawTriangle(32, 96, 36, 106, 28, 106);

    uint16_t tip_xprime = wind_triangle_center_x + sin(wind_angle + PI)*wind_triangle_tip_len;
    uint16_t tip_yprime = wind_triangle_center_y - cos(wind_angle + PI)*wind_triangle_tip_len;
    uint16_t tail_1_xprime = wind_triangle_center_x + sin(wind_angle + wind_triangle_tail_angle)*wind_triangle_tail_len;
    uint16_t tail_1_yprime = wind_triangle_center_y - cos(wind_angle + wind_triangle_tail_angle)*wind_triangle_tail_len;
    uint16_t tail_2_xprime = wind_triangle_center_x + sin(wind_angle - wind_triangle_tail_angle)*wind_triangle_tail_len;
    uint16_t tail_2_yprime = wind_triangle_center_y - cos(wind_angle - wind_triangle_tail_angle)*wind_triangle_tail_len;
    uint16_t tail_mid_xprime = wind_triangle_center_x + sin(wind_angle)*wind_triangle_tail_len/2;
    uint16_t tail_mid_yprime = wind_triangle_center_y - cos(wind_angle)*wind_triangle_tail_len/2;
    
    u8g2.drawTriangle(tip_xprime, tip_yprime, tail_1_xprime, tail_1_yprime, tail_mid_xprime, tail_mid_yprime);
    u8g2.drawTriangle(tip_xprime, tip_yprime, tail_2_xprime, tail_2_yprime, tail_mid_xprime, tail_mid_yprime);
    u8g2.drawLine(tip_xprime, tip_yprime, tail_1_xprime, tail_1_yprime);
    u8g2.drawLine(tail_mid_xprime, tail_mid_yprime, tail_2_xprime, tail_2_yprime);


/*

    u8g2.drawTriangle(uint16_t(triangle_center_x + sin(wind_angle + PI)*wind_triangle_tip_len),                           // x' tip
                      uint16_t(triangle_center_y - cos(wind_angle + PI)*wind_triangle_tip_len),                           // y' tip
                      uint16_t(triangle_center_x + sin(wind_angle + wind_triangle_tail_angle)*wind_triangle_tail_len),    // x' tail 1
                      uint16_t(triangle_center_y - cos(wind_angle + wind_triangle_tail_angle)*wind_triangle_tail_len),    // y' tail 1
                      uint16_t(triangle_center_x + sin(wind_angle)*wind_triangle_tail_len/2),                             // x' middle tail
                      uint16_t(triangle_center_y - cos(wind_angle)*wind_triangle_tail_len/2)                              // y' middle tail
                      );
    u8g2.drawTriangle(uint16_t(triangle_center_x + sin(wind_angle + PI)*wind_triangle_tip_len),                           // x' tip
                      uint16_t(triangle_center_y - cos(wind_angle + PI)*wind_triangle_tip_len),                           // y' tip
                      uint16_t(triangle_center_x + sin(wind_angle)*wind_triangle_tail_len/2),                             // x' middle tail
                      uint16_t(triangle_center_y - cos(wind_angle)*wind_triangle_tail_len/2),                             // y' middle tail
                      uint16_t(triangle_center_x + sin(wind_angle - wind_triangle_tail_angle)*wind_triangle_tail_len),    // x' tail 2
                      uint16_t(triangle_center_y - cos(wind_angle - wind_triangle_tail_angle)*wind_triangle_tail_len)     // y' tail 2
                      );
    u8g2.drawLine(    uint16_t(triangle_center_x + sin(wind_angle + PI)*wind_triangle_tip_len),                           // x' tip
                      uint16_t(triangle_center_y - cos(wind_angle + PI)*wind_triangle_tip_len),                           // y' tip
                      uint16_t(triangle_center_x + sin(wind_angle + wind_triangle_tail_angle)*wind_triangle_tail_len),    // x' tail 1
                      uint16_t(triangle_center_y - cos(wind_angle + wind_triangle_tail_angle)*wind_triangle_tail_len)    // y' tail 1                     
                      );
*/

/*
    u8g2.drawTriangle(  uint16_t(cos(angle)*wind_triangle_tip_len) + triangle_center_x,       // x' tip
                        uint16_t(sin(angle)*wind_triangle_tip_len) + triangle_center_y,      // y' tip
                        uint16_t(cos(angle)*wind_triangle_width + sin(angle)*wind_triangle_tail_len) + triangle_center_x,  // x' right tail
                        uint16_t(-cos(angle)*wind_triangle_tail_len + sin(angle)*wind_triangle_width) + triangle_center_y, // y' right tail
                        uint16_t(-cos(angle)*wind_triangle_width + sin(angle)*wind_triangle_tail_len) + triangle_center_x, // x' left tail
                        uint16_t(-cos(angle)*wind_triangle_tail_len - sin(angle)*wind_triangle_width) + triangle_center_y // y' right tail
                        );
  */  


                        


    // Waypoint Name
    u8g2.setFont(u8g2_font_12x6LED_tf);
    u8g2.drawStr(0, 80, "MarshallLZ");




    // Timer w/ Inverted Colors
    u8g2.drawRBox(0,146,51,16,3);
    u8g2.setDrawColor(0);
    u8g2.setFontMode(1);
    u8g2.setFont(u8g2_font_leaf_n_6x12_hn);
    u8g2.drawStr(2, 160, "12:34:00");
    u8g2.setFontMode(0);
    u8g2.setDrawColor(1);


    u8g2.setFont(u8g2_font_12x6LED_mn);
    u8g2.drawStr(0, 180, "12:34:00");
    
    //u8g2.drawStr(0,83,"12,345\"");      // altitude


    int v = 17;
    int width = 16;
    /*
    u8g2.drawFrame(64-width, 96, width, 48);
    u8g2.drawFrame(64-width, 144, width, 48);
    u8g2.drawBox(64-width, 144-v, width, v);
    */
  } while ( u8g2.nextPage() );  
}


void display_test_big(uint8_t page) {
  
char s[] = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xc0"
"\x60\x30\x10\x18\x08\x0c\x04\x04\x06\x06\x06\x06\x02\x06\x06\x06\x06\x04\x04"
"\x0c\x08\x18\x10\x30\x60\xc0\x80\x00\x00\x00\x00\x00\x00\x00\x00\x87\x87\x87"
"\x4b\x4b\x4b\x33\x33\x33\x00\x00\x00\x00\xe0\x00\x00\x00\x0e\x1f\x1b\x18\x88"
"\x8c\x84\xc6\xc2\x1f\x1f\x00\xff\x00\x2e\x21\x2d\x29\xe6\x00\x06\x87\x87\x06"
"\x06\x06\x06\x06\x9f\x9f\x00\x00\xff\x00\xfc\xfe\x86\x80\x80\xc0\x60\x18\x0c"
"\xfe\xfe\x00\x00\xff\xff\x00\x00\x00\x00\x60\x60\x60\x60\xfc\xfc\x60\x60\x60"
"\x60\x00\x00\x00\xff\xff\x00\x00\x00\xe6\xf7\x37\x36\x86\x86\xc6\xc6\x66\x66"
"\xf6\xf6\x00\x00\x00\x00\x00\x00\xf0\xf8\xf8\x78\x78\x78\x78\x78\x78\x78\x78"
"\x78\x78\xf8\xf8\xf0\x00\x00\x00\x00\x1c\x7f\x41\x41\x7f\x7f\x7f\x7f\x7f\x7f"
"\x7f\x7f\x6c\x6c\x6c\x6c\x6c\x6c\x5c\x98\x98\x00\x00\x00\xc0\x70\x1c\x06\x03"
"\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x03\x06\x1c\x70\xc0\x00\x00\x00\x03"
"\x03\xfb\x83\x83\xf3\x9b\x9b\xf3\x00\x00\x91\x53\x37\x53\x91\x00\x06\x03\x03"
"\x01\x0d\x0d\x0c\x1f\x1f\xcc\xcc\x00\xff\x00\x9a\xaa\xaa\xaa\x9a\x00\x06\x07"
"\x07\x06\x06\x06\x06\x06\xdf\xdf\x00\x00\xff\x00\xf8\xfd\x85\x81\xf9\xf8\x80"
"\x00\x04\xfd\xf9\x00\x00\xff\xff\x00\x00\xc0\xf8\xd8\xc0\xc0\xc0\xc3\xc3\xc0"
"\xc0\xc0\xf8\xf8\x00\x00\xff\xff\x00\x00\x00\x01\x03\x03\x03\x01\x61\x60\x00"
"\x00\x00\x63\x63\x00\x00\x00\x00\x00\x00\xff\xff\xf0\x60\x66\x66\x66\x66\x66"
"\x66\x66\x66\x60\xf0\xff\xff\x00\x00\x00\x00\x20\x50\x88\x10\xa0\xc0\xc4\xd4"
"\x14\x64\x08\xf0\x9b\xbb\xbb\xbb\xfb\xdb\xdb\xd9\x99\x00\x00\xfe\xdf\xe0\xe0"
"\xb0\xb0\x18\x18\x0c\xbc\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\x00\xfc\xf8\xc0"
"\xc0\xc0\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\xfe\x00"
"\x00\x00\x00\xbc\xdd\xcd\x8d\x0d\x0d\xcd\x00\x00\x22\x36\x2a\x22\x22\x00\x3e"
"\x3e\x06\x06\x1e\x3e\x30\x36\x36\x3e\x1c\x00\xff\x00\x03\x00\x01\x00\x03\x00"
"\x7c\xfe\xc6\xc6\x7c\x7c\xc6\xc6\xfe\x7c\x00\x00\xff\x00\x00\x81\xc1\xc1\xc0"
"\xc1\xc3\xc3\xdb\x99\x18\x0c\x00\xff\xff\x00\x00\x81\xc1\xc1\x61\x61\x31\x31"
"\x19\xf9\xf9\x01\x07\x07\x00\x00\xff\xff\x00\x00\x00\x3f\x3f\x03\x03\x1f\x3f"
"\x30\x30\x33\x33\x3f\x1e\x00\x00\x00\x00\x00\x00\xff\xff\xf0\xe0\xe6\xe6\xe6"
"\xe6\xe6\xe6\xe6\xe6\xe0\xf0\xff\xff\x00\x00\x00\x00\x00\x00\x02\x07\x0f\x07"
"\x0b\x11\x22\x14\x08\x00\x6d\x6d\x6d\x6d\x6d\x6d\x5d\x99\x99\x00\x00\x03\x1f"
"\x70\xc0\x01\x01\x03\x03\x06\x87\xe0\xf8\xf0\xe0\xe0\x90\x08\x04\x02\x01\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x70\x1f"
"\x03\x00\x18\x18\x18\xff\x98\x98\x9f\x9e\x9e\x9b\x00\x00\x00\x00\xe0\x00\x00"
"\x00\x30\xb0\xb8\x30\x30\x30\x30\x30\x30\xb0\xb0\x00\xff\x00\x40\xc0\xf8\xc0"
"\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x0f\x1f\xb9"
"\xb0\xb0\xb0\xb0\xb0\xb9\x1f\x0f\x00\x00\xff\xff\x00\x00\x87\xc7\xc7\xe7\xe7"
"\xe7\xe7\xe7\xef\xef\xc7\xc7\x87\x00\x00\xff\xff\x00\x00\x00\x3f\x3f\x33\x10"
"\x98\x98\x98\x8c\x8c\x8c\x86\x86\x80\x80\x80\x80\x00\x00\xff\xff\x0f\x07\x67"
"\x67\x67\x64\x64\x67\x67\x67\x04\x0c\xff\xff\x00\x00\x00\x00\x08\x18\x28\x4a"
"\x2c\x18\x18\x2c\x4a\x28\x18\x08\x03\x13\x33\x73\xf3\x73\x33\x11\x01\x00\x00"
"\x00\x00\x00\x01\x03\x06\x0c\x18\x36\x67\x47\xc3\x83\x83\x01\x01\x01\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x80\x80\xc0\x40\x60\x30\x18\x0c\x06\x03\x01"
"\x00\x00\x00\x00\x00\x00\x00\x7c\xc1\xc1\xf9\xcd\xcd\xf9\x00\x00\x71\x23\x27"
"\x23\x21\x00\x07\x0f\x0d\x0c\x64\x66\x82\x83\x81\x6f\x6f\x00\xff\x00\x44\x44"
"\x55\x54\x28\x00\xf8\xfc\x0e\x06\x76\xfe\xc6\xc6\xfe\x7c\x00\x00\xff\x00\x1e"
"\x3f\x73\x61\x61\x61\x61\x61\x73\x3f\x1e\x00\x00\xff\xff\x00\x00\x0f\x1f\x1d"
"\xb8\xb8\xb8\xb8\xb8\xb8\xb8\x1d\x1f\x0f\x00\x00\xff\xff\x00\x00\x00\x00\x00"
"\x00\x00\x87\x8f\x8d\x8d\x8d\x8d\x8f\x87\x01\x01\x01\x01\x00\x00\xff\xff\x0f"
"\x06\x66\x66\x66\x66\x66\x66\x66\x66\x06\x0f\xff\xff\x00\x00\x00\x00\xc0\xf0"
"\x18\xcc\xe4\x30\x90\xc0\x60\x00\x80\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xa0\xa1\xc1\x41\x43"
"\x03\x03\x03\x03\x03\x03\x03\x83\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x36\x36\x36\x36\x36\x36\x36\x36\x36\x36\x00\x00\x45"
"\x6d\x55\x45\x45\x00\x8c\xc6\xc6\x02\x1b\x9b\x19\xff\xff\xd8\x98\x00\xff\x00"
"\x35\x55\x32\x12\x12\x00\xf0\xf0\x30\x30\xf0\xf0\x00\x10\xf6\xe6\x00\x00\xff"
"\x00\x3c\x7e\xe7\xc3\xc3\xc3\xc3\xc3\xe7\x7e\x3c\x00\x00\xff\xff\x00\x00\x3e"
"\x7f\x77\xe3\xe3\xe3\xe3\xe3\xe3\xe3\x77\x7f\x3e\x00\x00\xff\xff\x00\x00\x00"
"\x00\x00\x00\x00\x35\x7f\x6d\x6d\x6d\x6d\x6d\x6d\x00\x00\x00\x00\x00\x00\x0f"
"\x1f\x1f\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1f\x1f\x0f\x00\x00\x00\x00"
"\x07\x1f\x30\x67\x4f\x18\x13\x07\x0c\x01\x03\x03\x3c\x7e\x66\x60\x38\x1c\x38"
"\x70\x60\x66\x7e\x3c\x00\x88\xd8\xa8\x88\x88\x00\x00\x00\x00\x2a\x6a\x6a\xa9"
"\xa9\x29\x00\x00\xc0\xe0\x78\x7c\xff\xff\xf8\x00\x00\x00\x00\xc6\xe7\x66\x06"
"\x86\xc6\xe6\xef\x00\x00\x00\x00\x00\x06\x06\x06\x06\x06\x06\x06\x06\x7e\x00"
"\xf0\xf7\x31\x33\x31\x37\x30\x33\x37\x36\x36\x33\x31\xf3\xf6\x36\x37\x33\x30"
"\x3f\x30\x37\x32\x32\x32\x32\xf0\x37\xf7\xf0\xf0\xf3\xf7\xf6\xf6\xf7\xf3\xf0"
"\xf0\x3f\x30\xf6\xf6\xf2\xf2\xf0\xf0\xf0\xf0\xf0\xf0\xf0\x30\x30\xff\xff\xf0"
"\xe0\xc0\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xc0\x60\x30\x3f\xff\xf0"
"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\xf0\xf0\x30\x30\x30\x30\x30\x30"
"\x30\x30\x30\x30\x30\xf0\xf0\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\xf0"
"\xf0\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\xf0\xf0\x7c\xfe\xc6\xc6\xc0"
"\xe0\x70\x38\x1c\x0e\xfe\xfe\x00\xae\xaa\xee\xa2\xa2\x00\x00\x00\x00\x0d\x15"
"\x15\x15\x15\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x01\x03"
"\x03\x03\x01\x00\x03\x03\x00\x00\x00\x00\x00\x7f\x30\x10\x18\x0c\x04\x06\x03"
"\x7f\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x0f\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xf0\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xf0\xf0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\xf0\xff"
"\xff\xff\xff\xff\xff\xff\xfe\xfc\xf8\xf0\x18\x0c\x06\x03\x01\x00\x00\x00\x00"
"\x0f\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x0f\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x0f\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x0f\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff";

char t[] = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\xf0\xf0\xf0\xb0\x30\x30"
"\x30\x30\x30\x30\x30\x00\x00\x00\xfc\xfe\xfe\x8e\x8e\x8e\xc0\xc0\xe0\x60\x70"
"\x30\x38\x18\x1c\xfc\xfe\xfe\x00\x00\x00\xff\xff\x00\x00\x00\xf0\xf8\x98\x98"
"\xc0\xc0\x60\x60\x30\x30\xf8\xf8\x00\x00\x32\x55\x77\x55\x35\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\xf8\xf8\x98\xc0\xc0\xc0\x60\x60\x60\x30\x30\x00\x00\x00"
"\xb8\x90\x90\x90\x90\x00\x00\xff\xff\x00\x00\x00\x00\x60\x60\x60\x60\xfc\xfc"
"\x60\x60\x60\x60\x00\x00\x00\xff\xff\x00\x00\xf3\xfb\x9b\x9b\xc3\xc3\x63\x63"
"\x33\x33\xfb\xfb\x00\x00\x00\x00\x00\xf0\xf8\xf8\x78\x78\x78\x78\x78\x78\x78"
"\x78\x78\x78\xf8\xf8\xf0\x00\x00\x1c\x7f\x41\x41\x7f\x7f\x7f\x7f\x7f\x7f\x7f"
"\x7f\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x80\xc0\xe0\xf0\xf8\xfc\xfe\xff\x00\x60\x60\x60\x61\x63"
"\x67\x67\x6e\x7c\x78\x78\x70\x00\x00\x00\xe1\xf3\xf3\x73\x73\x73\x01\x81\xc0"
"\x80\x00\x00\x70\x70\x70\xf3\xf3\xe3\x00\x00\x00\xff\xff\x00\x00\x00\x78\xfd"
"\xcd\xcd\x60\x30\x60\xc0\xcc\xcc\xfd\x79\x00\x00\x52\x55\x55\x55\x22\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x79\xfd\xcd\xcc\x60\x20\x30\x18\x18\xfc\xfc\x00"
"\x00\x00\x8b\xd8\xa9\x88\x8b\x00\x00\xff\xff\x00\x00\xc0\xf8\xd8\xc0\xc0\xc0"
"\xc3\xc3\xc0\xc0\xc0\xf8\xf8\x00\x00\xff\xff\x00\x00\x80\x81\x81\x81\x80\xb0"
"\x30\x00\x80\x80\xb1\x31\x00\x00\x00\x00\x00\xff\xff\xf0\x60\x66\x66\x66\x66"
"\x66\x66\x66\x66\x60\xf0\xff\xff\x00\x00\x60\xf0\x98\x10\xa0\xc0\xc4\xd4\x14"
"\x64\x08\xf0\x00\x00\xff\xff\x00\x00\x00\xc0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0"
"\xe0\xe0\xc0\x00\x04\x0e\x1f\x3f\x7f\xff\xff\xff\xff\xff\xff\x00\x0e\x0c\x8c"
"\x9c\x98\x98\xd8\xf0\xf0\xf0\x70\x60\x00\x00\x00\x07\x0f\x0f\x0e\x0e\x0e\x0e"
"\x07\x01\x07\x0f\x0e\x0e\x0e\x0e\x8f\x8f\x87\x80\x80\x00\xff\xff\x00\x00\x00"
"\xc0\xe0\x60\x60\x60\xc0\x60\x60\x60\x60\xec\xcc\x04\x00\x43\x41\x43\x41\xc3"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x12\x12\x12\x0c\x00\x1c\x04\x0c\x04"
"\x04\x00\x00\x00\x0e\x12\x0e\x02\x02\x00\x00\xff\xff\x00\x00\x81\xc1\xc1\x61"
"\x61\x31\x31\x19\xf9\xf9\x01\x07\x07\x00\x00\xff\xff\x00\x00\x9f\x9f\x81\x01"
"\x0f\x1f\x18\x18\x19\x19\x1f\x0f\x00\x00\x00\x00\x00\xff\xff\xf0\xe0\xe6\xe6"
"\xe6\xe6\xe6\xe6\xe6\xe6\xe0\xf0\xff\xff\x00\x00\x00\x04\x0f\x1f\x0f\x0f\x1b"
"\x31\x32\x1c\x08\x00\x00\x00\xff\xff\x00\x00\x00\xff\xff\x31\xec\xfc\xf0\xe1"
"\xe7\xe6\xf1\xff\xff\x00\x00\x00\x00\x00\x00\x00\x01\x03\x07\x0f\x1f\x00\x83"
"\xc7\xc7\xc7\xc5\x6d\x6c\x6c\x6c\x38\x38\x38\x00\x00\x00\xf0\xf8\xf8\x38\x38"
"\x38\x38\xf0\xe0\xf0\x38\x38\x38\x38\x38\xfb\xfb\xf3\x01\x01\x00\xff\xff\x00"
"\x00\x00\xf3\xf7\x36\x36\xf6\xf3\x06\x06\x36\x36\xf7\xe3\x00\x00\x48\x54\x5c"
"\x54\x95\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x60\x70\x60\x60\x60\x60\x60"
"\x60\x60\x60\x00\x00\x00\x88\x54\x5c\x54\x94\x00\x00\xff\xff\x00\x00\x87\xc7"
"\xc7\xe7\xe7\xe7\xe7\xe7\xef\xef\xc7\xc7\x87\x00\x00\xff\xff\x00\x00\x1f\x1f"
"\x19\x08\xcc\xcc\xcc\xc6\xc6\xc6\xc3\xc3\xc0\xc0\xc0\xc0\x00\xff\xff\x0f\x07"
"\x67\x67\x67\x64\x64\x67\x67\x67\x04\x0c\xff\xff\x00\x00\x18\x38\x68\xca\x6e"
"\x3c\x18\x3c\x6e\xca\x68\x38\x18\x00\xff\xff\x00\x00\x00\xff\xff\x90\x9c\x0c"
"\x6c\x64\x04\x64\x64\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x01\x01\x00\x00\x00\xc0\xc0\xc0\xc0\xc0\xc0\xc0\x00\x00\x00\x83\x87\x87"
"\x87\x87\x87\x87\x83\x81\x03\x07\x07\x87\x87\x87\x87\x87\x03\x00\x00\x00\xff"
"\xff\x00\x00\x00\xf3\xfb\x98\x98\xc1\x63\xc3\x83\x9b\x9b\xfb\xf1\x00\x00\x4a"
"\x5a\x6a\x4a\x49\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\xf8\x18\x18\xf8\xf8"
"\x80\x80\x98\xfb\xf3\x00\x00\x00\xd9\x44\xc4\x44\xd9\x00\x00\xff\xff\x00\x00"
"\x0f\x1f\x1d\xb8\xb8\xb8\xb8\xb8\xb8\xb8\x1d\x1f\x0f\x00\x00\xff\xff\x00\x00"
"\x00\x00\x00\x00\xc3\xc7\xc6\xc6\xc6\xc6\xc7\xc3\x00\x00\x00\x00\x00\xff\xff"
"\x0f\x06\x66\x66\x66\x66\x66\x66\x66\x66\x06\x0f\xff\xff\x00\x00\xc0\xf0\x18"
"\xcc\xe4\x30\x90\xc0\x60\x00\x80\x80\x00\x00\xff\xff\x00\x00\x00\xff\xff\x07"
"\x67\x67\x07\x26\x66\x66\x66\xff\xff\x00\xf0\xf8\x98\x98\x80\xe0\x70\xe0\x80"
"\x98\x98\x98\xf8\xf0\x00\x00\x00\x71\x71\x7b\x7f\x6e\x64\x64\x00\x00\x00\x7f"
"\x7f\x7f\x03\x03\x03\x3f\x7f\x7f\x70\x70\x70\x73\x73\x73\x7f\x7f\x3f\x00\x00"
"\x00\xff\xff\x00\x00\x00\x30\x11\x19\x09\x00\x00\x00\x01\x01\x01\x01\x00\x00"
"\x00\x56\x51\x71\x51\x56\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00"
"\x58\x7d\x6d\x6d\x7d\x79\x60\x6c\x38\x00\x05\x04\x04\x04\x1d\x00\x00\xff\xff"
"\x00\x00\x3e\x7f\x77\xe3\xe3\xe3\xe3\xe3\xe3\xe3\x77\x7f\x3e\x00\x00\xff\xff"
"\x00\x00\x00\x00\x00\x00\x1a\x3f\x36\x36\x36\x36\x36\x36\x00\x00\x00\x00\x00"
"\x0f\x1f\x1f\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1f\x1f\x0f\x00\x00\x07"
"\x1f\x30\x67\x4f\x18\x13\x07\x0c\x01\x03\x03\x00\x00\xff\xff\x00\x00\x00\xff"
"\xff\x03\xce\xce\xcf\xcf\xce\xce\xce\xff\xff\x00\xf0\xf9\x19\x19\x01\x80\x80"
"\xc0\xe1\x61\x31\x31\xf9\xf8\x00\x00\x00\x3f\x63\x63\x3f\x03\x03\x03\x00\x00"
"\x00\xfc\xfe\xfe\xce\xce\xce\xc0\xf0\x38\xf0\xe0\xc0\xce\xce\xce\xfe\xfe\xfc"
"\x00\x00\x00\xff\xff\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\xff\xff\x03"
"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\xff\x03\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\x03\x03\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\x03"
"\xff\xff\xff\xfe\xfc\xf8\xf0\xe0\xc0\x80\x00\x80\xc0\x60\x30\x18\x0c\x06\x03"
"\x03\xff\xff\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\xff\xff\x03\x03\x03"
"\x03\x03\x03\x03\x03\x03\x03\x03\xff\xff\x03\x03\x03\x03\x03\x03\x03\x03\x03"
"\x03\x03\xff\xff\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\xff\xff\x00\x00"
"\x00\x03\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x03\x00\x01\x03\x03\x03\x03"
"\x01\x01\x00\x00\x00\x00\x00\x03\x03\x00\x00\x00\xc6\xc6\xc6\xfe\xc6\xc6\xc6"
"\x00\x00\x00\x70\x71\x31\x39\x39\x19\x01\x00\x00\x00\x01\x01\x01\x01\x01\x01"
"\x01\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";


//Serial.println("starting LCD stuff");
/* NOT SURE WHAT THIS IS
GLCD_inst(0b10100101);
delay(500);
GLCD_data(0b10100101);
delay(500);
GLCD_inst(0b10100100);
delay(500);
GLCD_data(0b10100100);
delay(500);
*/

/*


  //GO HOME GLCD
  GLCD_inst(0b00000000);  //Column address LSB ->0
  delay(20);
  GLCD_inst(0b00010000);  //Column address MSB ->0
  delay(20);
  GLCD_inst(0b10110000);  //Page address ->0
  delay(20);
*/


  if (page == 1) {
    for (int page=0; page<8; page++) {
      for (int d=0; d<192; d++) {
        GLCD_data(s[d+page*192]);  
      }
    }    
  } else if (page == 2) {
    for (int page=0; page<8; page++) {
      for (int d=0; d<192; d++) {
        GLCD_data(t[d+page*192]);  
      }
    }    
  }
  digitalWrite(LCD_BACKLIGHT, !digitalRead(LCD_BACKLIGHT));
  delay(500);
//BIG LCD TEST 




}


void GLCD_inst(byte data) {
  digitalWrite(GLCD_RS, LOW);
  GLCD_spiCommand(data);
}

void GLCD_data(byte data) {
  digitalWrite(GLCD_RS, HIGH);
  GLCD_spiCommand(data);
}


// Draw polygons 
// by default, u8g2 lib supports polygons to 6 points, but only exposes u8g2_DrawTriangle
// Max polygon point size can be increased from 6 in the u8g2 library, but we'll try to write display code that doesn't need library modifications
/*
void u8g2_DrawPoly(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
  u8g2_DrawPoly(x0, y0, x1, y1, x2, y2, false, false, false, false, false, false);  
}

void u8g2_DrawPoly(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3) {
  u8g2_DrawPoly(x0, y0, x1, y1, x2, y2, x3, y3, false, false, false, false);  
}

void u8g2_DrawPoly(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t x4, uint16_t y4) {
  u8g2_DrawPoly(x0, y0, x1, y1, x2, y2, x3, y3, x4, y4, false, false);  
}

void u8g2_DrawPoly(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t x4, uint16_t y4, uint16_t x5, uint16_t y5) {
  u8g2_ClearPolygonXY();
  u8g2_AddPolygonXY(u8g2, x0, y0);
  u8g2_AddPolygonXY(u8g2, x1, y1);
  u8g2_AddPolygonXY(u8g2, x2, y2);
  if(x3) {
    u8g2_AddPolygonXY(u8g2, x3, y3);
    if(x4) {
      u8g2_AddPolygonXY(u8g2, x4, y4);
      if(x5) {
        u8g2_AddPolygonXY(u8g2, x5, y5);  
      }
    }
  }
  u8g2_DrawPolygon(u8g2);
}
*/


//void rotate_points()

